{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alius\\\\Downloads\\\\stripe-sample-code\\\\src\\\\checkout.js\";\nimport React from \"react\";\nimport { PaymentElement, LinkAuthenticationElement } from \"@stripe/react-stripe-js\";\nimport { useState } from \"react\";\nimport { useStripe, useElements } from \"@stripe/react-stripe-js\";\nexport default function CheckoutForm() {\n  const [name, setName] = useState(\"\");\n  const [snackbar, setSnackbar] = useState(true);\n  const stripe = useStripe();\n  const elements = useElements();\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n    setIsLoading(true);\n    const Domain = \"http://localhost:3000/\";\n    const {\n      error\n    } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        // Make sure to change this to your payment completion page\n        return_url: `${Domain}success`\n      }\n    });\n\n    // This point will only be reached if there is an immediate error when\n    // confirming the payment. Otherwise, your customer will be redirected to\n    // your `return_url`. For some payment methods like iDEAL, your customer will\n    // be redirected to an intermediate site first to authorize the payment, then\n    // redirected to the `return_url`.\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\n      setMessage(error.message);\n    } else {\n      setMessage(\"An unexpected error occured.\");\n      setTimeout(() => {\n        setSnackbar(false);\n      }, 3000);\n    }\n    setIsLoading(false);\n  };\n  return /*#__PURE__*/React.createElement(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LinkAuthenticationElement, {\n    id: \"link-authentication-element\"\n    // Access the email value like so:\n    ,\n    onChange: event => {\n      setEmail(event.value.email);\n    }\n    // Prefill the email field like so:\n    ,\n    options: {\n      defaultValues: {\n        email: \"aliusama8986@gmail.com\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PaymentElement, {\n    id: \"payment-element\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: isLoading || !stripe || !elements,\n    id: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"button-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spinner\",\n    id: \"spinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, \"loading....\") : \"Pay now\")), message && snackbar && /*#__PURE__*/React.createElement(\"div\", {\n    id: \"payment-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 31\n    }\n  }, message));\n}","map":{"version":3,"names":["React","PaymentElement","LinkAuthenticationElement","useState","useStripe","useElements","CheckoutForm","name","setName","snackbar","setSnackbar","stripe","elements","message","setMessage","isLoading","setIsLoading","handleSubmit","e","preventDefault","Domain","error","confirmPayment","confirmParams","return_url","type","setTimeout","createElement","id","onSubmit","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onChange","event","setEmail","value","email","options","defaultValues","disabled","className"],"sources":["C:/Users/alius/Downloads/stripe-sample-code/src/checkout.js"],"sourcesContent":["import React from \"react\";\r\nimport {\r\n  PaymentElement,\r\n  LinkAuthenticationElement,\r\n} from \"@stripe/react-stripe-js\";\r\nimport { useState } from \"react\";\r\nimport { useStripe, useElements } from \"@stripe/react-stripe-js\";\r\n\r\nexport default function CheckoutForm() {\r\n  const [name, setName] = useState(\"\");\r\n  const [snackbar, setSnackbar] = useState(true);\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const [message, setMessage] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js has not yet loaded.\r\n      // Make sure to disable form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    const Domain = \"http://localhost:3000/\";\r\n    const { error } = await stripe.confirmPayment({\r\n      elements,\r\n      confirmParams: {\r\n        // Make sure to change this to your payment completion page\r\n        return_url: `${Domain}success`,\r\n      },\r\n    });\r\n\r\n    // This point will only be reached if there is an immediate error when\r\n    // confirming the payment. Otherwise, your customer will be redirected to\r\n    // your `return_url`. For some payment methods like iDEAL, your customer will\r\n    // be redirected to an intermediate site first to authorize the payment, then\r\n    // redirected to the `return_url`.\r\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\r\n      setMessage(error.message);\r\n    } else {\r\n      setMessage(\"An unexpected error occured.\");\r\n      setTimeout(() => {\r\n        setSnackbar(false);\r\n      }, 3000);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return (\r\n    <form id='payment-form' onSubmit={handleSubmit}>\r\n      <LinkAuthenticationElement\r\n        id='link-authentication-element'\r\n        // Access the email value like so:\r\n        onChange={(event) => {\r\n          setEmail(event.value.email);\r\n        }}\r\n        // Prefill the email field like so:\r\n        options={{ defaultValues: { email: \"aliusama8986@gmail.com\" } }}\r\n      />\r\n      <PaymentElement id='payment-element' />\r\n      <button disabled={isLoading || !stripe || !elements} id='submit'>\r\n        <span id='button-text'>\r\n          {isLoading ? (\r\n            <div className='spinner' id='spinner'>\r\n              loading....\r\n            </div>\r\n          ) : (\r\n            \"Pay now\"\r\n          )}\r\n        </span>\r\n      </button>\r\n      {/* Show any error or success messages */}\r\n      {message && snackbar && <div id='payment-message'>{message}</div>}\r\n    </form>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}