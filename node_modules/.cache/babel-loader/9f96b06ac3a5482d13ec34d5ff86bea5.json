{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alius\\\\Downloads\\\\stripe-sample-code\\\\src\\\\checkout.js\";\nimport React from \"react\";\nimport { PaymentElement, LinkAuthenticationElement } from \"@stripe/react-stripe-js\";\nimport { useState } from \"react\";\nimport { useStripe, useElements } from \"@stripe/react-stripe-js\";\nexport default function CheckoutForm() {\n  // eslint-disable-next-line\n  const [email, setEmail] = useState(\"\");\n  const [snackbar, setSnackbar] = useState(true);\n  const stripe = useStripe();\n  const elements = useElements();\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  console.log(\"stripe stripe stripe stripe stripe stripe \");\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n    setIsLoading(true);\n    const Domain = \"http://localhost:3000/\";\n    const {\n      error\n    } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        // Make sure to change this to your payment completion page\n        return_url: `${Domain}success`\n      }\n    });\n\n    // This point will only be reached if there is an immediate error when\n    // confirming the payment. Otherwise, your customer will be redirected to\n    // your `return_url`. For some payment methods like iDEAL, your customer will\n    // be redirected to an intermediate site first to authorize the payment, then\n    // redirected to the `return_url`.\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\n      setMessage(error.message);\n      setTimeout(() => {\n        setSnackbar(false);\n      }, 3000);\n    } else {\n      setMessage(\"An unexpected error occured.\");\n      setTimeout(() => {\n        setSnackbar(false);\n      }, 3000);\n    }\n    setIsLoading(false);\n  };\n  return /*#__PURE__*/React.createElement(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LinkAuthenticationElement, {\n    id: \"link-authentication-element\"\n    // Access the email value like so:\n    ,\n    onChange: event => {\n      setEmail(event.value.email);\n    }\n    // Prefill the email field like so:\n    ,\n    options: {\n      defaultValues: {\n        email: \"aliusama.vectorcoder@gmail.com\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PaymentElement, {\n    id: \"payment-element\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }), !stripe && /*#__PURE__*/React.createElement(\"button\", {\n    disabled: isLoading || !stripe || !elements,\n    id: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"button-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spinner\",\n    id: \"spinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 15\n    }\n  }) : \"Pay now\")), message && snackbar && /*#__PURE__*/React.createElement(\"div\", {\n    id: \"payment-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 31\n    }\n  }, message));\n}","map":{"version":3,"names":["React","PaymentElement","LinkAuthenticationElement","useState","useStripe","useElements","CheckoutForm","email","setEmail","snackbar","setSnackbar","stripe","elements","message","setMessage","isLoading","setIsLoading","console","log","handleSubmit","e","preventDefault","Domain","error","confirmPayment","confirmParams","return_url","type","setTimeout","createElement","id","onSubmit","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onChange","event","value","options","defaultValues","disabled","className"],"sources":["C:/Users/alius/Downloads/stripe-sample-code/src/checkout.js"],"sourcesContent":["import React from \"react\";\r\nimport {\r\n  PaymentElement,\r\n  LinkAuthenticationElement,\r\n} from \"@stripe/react-stripe-js\";\r\nimport { useState } from \"react\";\r\nimport { useStripe, useElements } from \"@stripe/react-stripe-js\";\r\n\r\nexport default function CheckoutForm() {\r\n  // eslint-disable-next-line\r\n  const [email, setEmail] = useState(\"\");\r\n  const [snackbar, setSnackbar] = useState(true);\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const [message, setMessage] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\nconsole.log(\"stripe stripe stripe stripe stripe stripe \",)\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js has not yet loaded.\r\n      // Make sure to disable form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    const Domain = \"http://localhost:3000/\";\r\n    const { error } = await stripe.confirmPayment({\r\n      elements,\r\n      confirmParams: {\r\n        // Make sure to change this to your payment completion page\r\n        return_url: `${Domain}success`,\r\n      },\r\n    });\r\n\r\n    // This point will only be reached if there is an immediate error when\r\n    // confirming the payment. Otherwise, your customer will be redirected to\r\n    // your `return_url`. For some payment methods like iDEAL, your customer will\r\n    // be redirected to an intermediate site first to authorize the payment, then\r\n    // redirected to the `return_url`.\r\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\r\n      setMessage(error.message);\r\n      setTimeout(() => {\r\n        setSnackbar(false);\r\n      }, 3000);\r\n    } else {\r\n      setMessage(\"An unexpected error occured.\");\r\n      setTimeout(() => {\r\n        setSnackbar(false);\r\n      }, 3000);\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return (\r\n    <form id='payment-form' onSubmit={handleSubmit}>\r\n      <LinkAuthenticationElement\r\n        id='link-authentication-element'\r\n        // Access the email value like so:\r\n        onChange={(event) => {\r\n          setEmail(event.value.email);\r\n        }}\r\n        // Prefill the email field like so:\r\n        options={{ defaultValues: { email: \"aliusama.vectorcoder@gmail.com\" } }}\r\n      />\r\n      <PaymentElement id='payment-element' />\r\n      {!stripe && (\r\n        <button disabled={isLoading || !stripe || !elements} id='submit'>\r\n          <span id='button-text'>\r\n            {isLoading ? (\r\n              <div className='spinner' id='spinner'></div>\r\n            ) : (\r\n              \"Pay now\"\r\n            )}\r\n          </span>\r\n        </button>\r\n      )}\r\n      {/* Show any error or success messages */}\r\n      {message && snackbar && <div id='payment-message'>{message}</div>}\r\n    </form>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}